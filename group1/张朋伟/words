鼠标
onmousemove 鼠标移动
onmouseout  鼠标离开
onmouseover 鼠标进入
onmouseenter 鼠标划入
onmouselaever 鼠标划出

元素事件
onclick     单击事件
ondblclick   双击事件
onsubmit   表单提交
onfocus     鼠标获取焦点
onblur      鼠标失去焦点
onchange    已经改变
oninput     正在输入输入

键盘
onkeyup     键盘抬起
onkeydown   键盘按下 
onkeypress  键盘按下抬起


窗口事件
onload    加载结束
onresize  改变窗口大小
onscroll  滚动条发生滚动

数组API
var arr = [3,,45,6];
清空
arr.length = 0;
arr = [];
删除第一个 返回删除元素
shift();
第一位置添加
unshift();
删除最后一个，返回删除元素
pop();
添加都最后  返回
push();新数组长度
splice       返回新数组

var months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// inserts at index 1
console.log(months);
// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']

months.splice(4, 1, 'May');
// replaces 1 element at index 4
console.log(months);
// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']



array.splice(start,删除个数,在删除位置添加的元素)
array.slice(start[,end])可以只有开头
slice();负数倒序，返回新数组
连接数组 返回新数组
concat()返回新数组

数组转字符串
数组.join("中间连接符")




字符串API
//获取第几个字符
charAt(index)
例： "hello, everyone".charAt(4);  结果： o
//获取某个字符的ascii码
charCodeAt（index）
例： "hello, everyone".charCodeAt(4);  结果： 111
//将ascii码转为字符
String.fromCharCode(97)  静态方法  结果：a
//截取部分
substring(start,end) 包含start，但不包含end
例："google is a great company".substring(0,6);  结果: google
//分割字符串
split("-")
例： "2017-08-08".split("-");  结果： ["2017","08", "08"]
//搜索字符串，若搜索不到则返回-1
indexOf("thank");
例： "ok, thankyou".indexOf("thank");  结果：4


date API
日期处理 Date ——如何创建日期对象
var d = new Date();
var d = new Date("2015/08/22");
获取年月日与修改年月日
getYear() / getFullYear()
getMonth() 
getDate()
setYear()
setMonth()
setDate() 
获取星期几
getDay()  0-6
获取时分秒
getHours()
getMinutes()
getSeconds()
显示当前时间\停留时间
日期处理
Date.parse("2015-08-24")
new Date(time)
getTime()/setTime()


dom的增删改查

DOM元素的基本操作 （增 、删、改、查）
查询---------
document.getElementById()    通过ID号查找元素
document.getElementsByTagName()    通过标签名称查找元素
document.getElementsByName()      通过name属性来查找元素  form表单
document.getElementsByClassName()   通过class属性来查找元素
IE8以下 不支持byClassName方法
增---------
document.createElement()   创建一个DOM元素
box.appendChild(target)    将target元素追加到box元素的内部，此时浏览器才能正确加载并显示元素
parent.insertBefore(newnode, oldnode)   将newnode元素插入到parent元素的内部，同时放在oldnode元素的前面
删除---------
parent.removeChild(child)    将child元素删除，parent是child元素的父亲
孩子节点删除，不用父元素
node.remove();
改------------样式
box.style.background = "red"; 


自定义属性
查
box.getAttribute("index")
改
box.index = 99;
box.setAttribute("index",99)
对于非行内样式的操作 只可修改
getComputedStyle(obj, null).top   //属性只读
parentNode   //获取父节点
childNodes    //获取所有子节点
children   //获取所有子标签(非W3C标准)
previousSibling  前一个兄弟节点
nextSibling        后一个兄弟节点
previousElementSibling     前一个兄弟元素（非W3C标准）
nextElementSibling           后一个兄弟元素（非W3C标准）


高级操作----位置、大小计算
offsetWidth /  clientWidth      计算元素的可视宽度  边框计算在内
offsetHeight / clientHeight     计算元素的可视高度

ele.offsetLeft     计算元素相对于参照物的位置(有定位的父元素)
ele.offsetTop     计算元素相对于参照物的位置(有定位的父元素)

//获取参照物父元素
offsetParent       获取参照物父元素，获取有定位的父元素